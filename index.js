console.log('-----------------------------------------------------')
console.log('Ol√°, mundo!', 'Revis√£o de JavaScript e Introdu√ß√£o a ES6!')
console.log('-----------------------------------------------------')

// ----------------------------------------------
console.log('Fun√ß√µes')

// FUN√á√ïES
// Possu√≠mos as fun√ß√µes: falar, dobro, calcularMedia
const falar = () => 'Pipipi popopo'


const dobro = (num) => num * 2


function calcularMedia(nota1, nota2, nota3) {
  const soma = (nota1 + nota2 + nota3)
  const media = soma / 3
  return media
}

// Vamos refatorar essas fun√ß√µes para a sintaxe de Arrow function





console.log('-----------------------------------------------------')
// ----------------------------------------------
console.log('Callback')

// CALLBACK
// Possu√≠mos as fun√ß√µes: somar, subtrair, multiplicar e dividir.
const somar = (a, b) => a + b


const subtrair = (a, b) => a - b


const multiplicar = (a, b) => a * b


const dividir = (a, b) => a / b


const ordenar = (a, b) => {
  (a <= b) ? [a, b] : [b, a]

}


// Crie uma fun√ß√£o chamada calcular que receber√° como par√¢metro: dois n√∫meros e uma fun√ß√£o de callback

const calcular = (n1, n2, callback) => callback(n1, n2)






// Fa√ßa a soma de dois n√∫meros usando a fun√ß√£o calcular

const resultadoSoma = calcular(3, 5, somar)
console.log(`A soma de 3 com 5 √© ${resultadoSoma}`)





// Fa√ßa a subtra√ß√£o de dois n√∫meros usando a fun√ß√£o calcular

const resultadoSubtrair = calcular(10, 5, subtrair)

console.log(`A subtra√ß√£o de 10 e 5 √© ${resultadoSubtrair}`)





// Fa√ßa a multiplica√ß√£o de dois n√∫meros usando a fun√ß√£o calcular

const resultadoMultiplica = calcular(2, 6, multiplicar)
console.log(`A multiplica√ß√£o de 2 e 6 √© ${resultadoMultiplica}`)





// Fa√ßa a divis√£o de dois n√∫meros usando a fun√ß√£o calcular

const resultadoDivisao = calcular(100, 5, dividir)
console.log(`O resultado da divis√£o entre 100 e 5 √© ${resultadoDivisao}`)




// Fa√ßa a ordena√ß√£o crescente de dois n√∫meros usando a fun√ß√£o calcular


const ordenaPraGente = calcular(11, 7, ordenar)
console.log(`Colocamos em ordem os n√∫mero 11 e 7: ${ordenaPraGente}`)





// Volte nas fun√ß√µes e refatore-as na sintaxe ES6

console.log('-----------------------------------------------------')
// ----------------------------------------------
console.log('Condicionais')

// CONDICIONAIS
// Uma estudante obteve as seguintes notas: n1, n2 e n3
const n1 = 9
const n2 = 5
const n3 = 1

// Verifique se a estudante foi aprovada. Se a m√©dia das notas for maior ou igual a 7, a estudante passou!

const media = calcularMedia(n1, n2, n3)

const resultado = (media >= 7) ? 'aprovada' : 'reprovada'

console.log(`A estudante foi ${resultado}`)

//condicao ? true : false






console.log('-----------------------------------------------------')
// ----------------------------------------------
// OBJETOS
console.log('Objetos  ü™ë')

// Declara√ß√£o de objetos
const objeto = new Object()
objeto.nome = 'cadeira'
objeto.tipo = 'madeira'
objeto.peso = 7

const pokemon = {
  name: 'Pikachu',
  type: 'el√©trico',
  height: 40.6,
}

// Fazer destructuring e acessar os valores de objeto e pokemon

const { nome, tipo, peso } = objeto
console.log(`O objeto ${nome} √© feito de ${tipo} e pesa ${peso} kg.`)

const { name, type, height } = pokemon
console.log(`Capturei o pokemon ${name} que tem tipo ${type} e pesa ${height} kg.`)


console.log('-----------------------------------------------------')
// ----------------------------------------------
// DATAS
console.log('Datas üóì')

// Outro exemplo de um objeto JavaScript √© o Date.

// Vamos criar a vari√°vel chamada hoje que ir√° receber a data de hoje.


const hoje = new Date()
console.log(hoje)




// Vamos capturar os valores de dia, mes e ano da data de hoje pelos m√©todos de Date



const dia = hoje.getDate()
const mes = hoje.getMonth()
const ano = hoje.getFullYear()
console.log(dia, mes, ano)



// Vamos criar uma data espec√≠fica. Lembrando que m√™s de Janeiro √© 0 no Javascript ü§∑üèª‚Äç‚ôÄÔ∏è

const nascimento = new Date(1998, 8, 05)
console.log(`nasci em ${nascimento}`)




// Podemos usar o m√©todo toLocaleString para formatar a data


const dataFormatada = hoje.toLocaleDateString('pt-BR')
console.log(dataFormatada)




// Temos mais op√ß√µes para formatar a data
const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }


const dataLonga = hoje.toLocaleDateString('pt-BR', options)
console.log(dataLonga)


/*
console.log('-----------------------------------------------------')
// ----------------------------------------------
  const pessoa = {
    nome: 'Yasminn',
    sobrenome: 'Vaz',
    idade: 1,
    altura: 1.62,
    peso: 55,
    andando: false,
    caminhouQuantosMetros: 0,
    fazerAniversario: () => pessoa.idade++,
    andar: (metrosCaminhados) => {
      this.andando = true
      this.caminhouQuantosMetros += metrosCaminhados
    },
    parar: () => this.andando = false,
    apresentacao: () => {
      const anos = (this.idade === 1) ? 'ano' : 'anos'
    
      const metros = (this.caminhouQuantosMetros === 1) ? 'metro' : 'metros'
    
      return `Ol√°, eu sou ${this.nome} ${this.sobrenome}, tenho ${this.idade} ${anos}, ${pessoa.altura}, meu peso √© ${this.peso} e, s√≥ hoje, eu j√° caminhei ${this.caminhouQuantosMetros} ${metros}!`
    }
  }
  
*/
/*pessoa.fazerAniversario = function () {
  return pessoa.idade++
}

pessoa.andar = function (metrosCaminhados) {
  pessoa.andando = true
  pessoa.caminhouQuantosMetros += metrosCaminhados
}

pessoa.parar = function () {
  pessoa.andando = false
}

pessoa.nomeCompleto = function () {
  return `Ol√°, meu nome √© ${pessoa.nome} ${pessoa.sobrenome}.`
}

pessoa.mostrarIdade = function () {
  return `Ol√°, eu tenho ${pessoa.idade} anos.`
}

pessoa.mostrarPeso = function () {
  return `Eu peso ${pessoa.peso}.`
}

pessoa.mostrarAltura = function () {
  return `Minha altura √© ${pessoa.altura}.`
}

pessoa.mostrarDistancia = function () {
  return `${pessoa.nome} caminhou ${pessoa.caminhouQuantosMetros}m.`
}

pessoa.apresentacao = function () {
  let anos = 'anos'
  let metros = 'metros'

  const anos = (pessoa.idade === 1) ? 'ano' : 'anos'
  

  const metros =(pessoa.caminhouQuantosMetros === 1) ? metros = 'metro' : metros = 'metros'
  

  return `Ol√°, eu sou ${pessoa.nome} ${pessoa.sobrenome}, tenho ${pessoa.idade} ${anos}, ${pessoa.altura}, meu peso √© ${pessoa.peso} e, s√≥ hoje, eu j√° caminhei ${pessoa.caminhouQuantosMetros} ${metros}!`
}
*/

// Vamos utilizar o formato ES6 para refatorar a constante pessoa.

// Quero criar as vari√°veis pessoa2 e pessoa3 com as mesmas propriedades, mas alterando os valores de nome, sobrenome, altura e peso






console.log('-----------------------------------------------------')
// ----------------------------------------------
// CLASSES
console.log('Classes üÜï')

// Vamos criar a classe Pessoa

const pessoa = {
  nome: 'Yasminn',
  sobrenome: 'Vaz',
  idade: 1,
  altura: 1.62,
  peso: 55,
  andando: false,
  caminhouQuantosMetros: 0,
  fazerAniversario: () => pessoa.idade++,
  andar: (metrosCaminhados) => {
    this.andando = true
    this.caminhouQuantosMetros += metrosCaminhados
  },
  parar: () => this.andando = false,
  apresentacao: () => {
    const anos = (this.idade === 1) ? 'ano' : 'anos'

    const metros = (this.caminhouQuantosMetros === 1) ? 'metro' : 'metros'

    return `Ol√°, eu sou ${this.nome} ${this.sobrenome}, tenho ${this.idade} ${anos}, ${pessoa.altura}, meu peso √© ${this.peso} e, s√≥ hoje, eu j√° caminhei ${this.caminhouQuantosMetros} ${metros}!`
  }
}
pessoa.andar(100)
console.log(pessoa.apresentacao())

//vamos criar a classe Pessoa
class Pessoa {

  constructor(name, surname, age, walking = false){
  
this.nome = name
this.sobrenome = surname
this.idade = age
this.andando = walking

}}
const pessoa3 = new Pessoa('Camila', 'Marques', 24)
console.log(pessoa3.nome)

const { sobrenome } = pessoa3

console.log(sobrenome)
console.log(pessoa3)


console.log('-----------------------------------------------------')
// ----------------------------------------------
// ARRAYS
console.log('Arrays [ 0Ô∏è‚É£  , 1Ô∏è‚É£  , 2Ô∏è‚É£  ]')

// Declara√ß√£o de arrays
const lista = new Array('pera', 'uva', 'ma√ß√£')

const numbers = [9, 2, 5]

// Acessando elementos pela posi√ß√£o do array


const primeiroItem = lista[0]
console.log(primeiroItem)
console.log(lista[2]);
console.log(lista.length);



// Informe o tamanho de cada array

console.log(lista.length);




// Fa√ßa a desestrutura√ß√£o do array



const [primeiro, segundo, terceiro] = lista
console.log(primeiro);
console.log(segundo);
console.log(terceiro);



// Possuo 4 tias. Os dados delas est√£o armazenados no array de objetos dentro do arquivo db.js
// Vamos importar esses dados para podermos us√°-los durante nosso exerc√≠cio de revis√£o.
const db = require('./db')

console.log(db)
const {tias} = db
console.log(tias);




console.log('-----------------------------------------------------')
// ----------------------------------------------
// M√âTODOS DE ITERA√á√ÉO
console.log('M√©todos itera√ß√£o ')

// Mostre a tabela das tias pelo console.table()

console.table(tias)

console.table(lista)





console.log('-----------------------------------------------------')
console.log('filter()')
// filter
// Filtre as tias que moram em SP e mostre no console.



const tiasSP = tias.filter(item => item.local === "SP")

console.table(tiasSP);





console.log('-----------------------------------------------------')
console.log('map()')
// map
// Crie um novo array chamado tiasMaisChegadas e adicione uma propriedade chamada cuidouDeMim que recebe um valor booleano. Caso a tia teve at√© 2 filhos, isso significa que ela cuidou de mim e seu valor √© true. Caso ela teve mais que 2 filhos, o valor da propriedade cuidouDeMim √© false.







console.log('-----------------------------------------------------')
console.log('sort()')
// SORT

// Vamos praticar o m√©todo sort() com o array numbers
// const numbers = [9, 2, 5]

const comparar = (a, b) => {
  if (a < b) { // antenho a como primeiro e b vem depois
    return -1
  } else if (a > b) { //primeiro vem b e depois vem a m
    return 1
  } else { // se a e b forem iguais, mant√©m a mesma ordem
    return 0
  }
}
//o sorte faz exatemente oq meu if determina para organizar por tamanho
// Refatore a fun√ß√£o comparar e ordene numbers em ordem crescente

numbers.sort ((a, b) => a-b) // fun√ß√£o dentro do sort
console.log(numbers)





// Ordene as tias por ordem decrescente de idade (a mais velha primeiro)

function ordenarTias(a, b){
return b.idade - a.idade

}

tias.sort((a, b) => b.idade - a.idade)
  
  
console.table(tias);




console.log('-----------------------------------------------------')
console.log('reduce()')
// reduce

// Fa√ßa a soma do array numbers

const arrayReduzido = numbers.reduce((acumulador,item) => acumulador + item, 10)

console.log(arrayReduzido)





// Some a quantidade de netos que vov√≥ possui.


function somarNetos(acumulador, tia){
  return acumulador + tia.filhos
}

const netos =tias.reduce((acumulador, item) => acumulador + item, 10)





// ----------------------------------------------
console.log('-----------------------------------------------------')
console.log('                         Fim                         ')
console.log('-----------------------------------------------------')